





        {
        {
        }
        }
        }
    {
    }
{
}
    BgProcesses = malloc(sizeof(bgpr));
    BgProcesses->next = NULL;
            bool comm = exec_pipe(inp[i]);
        char buffer[MAX_INP_SIZE];
    char buffer[MAX_INP_SIZE];
    char *InputTxt = malloc(sizeof(char)*MAX_INP_SIZE);
    char *myPrompt = malloc(sizeof(char)*MAX_PROMPT_SIZE);
    char *ProcessInfopath = malloc(sizeof(char) * MAX_INP_SIZE);
    char *ProcessPath  = malloc(sizeof(char) * MAX_INP_SIZE);
        char* token = strtok(InputTxt, ";");
            continue;
    currJob = 0;fg_runnin = 0;fg_to_bg=0;
            dup2(stin,STDIN_FILENO);
            dup2(stou,STDOUT_FILENO);
                execute_command(inp[i]);
            exit(0);
        fclose(history_file);
        fflush(stdout);
        FILE* history_file = fopen(hisfile,"rw");
    /*Finding the dir of a.out*/
        for(int i=0; i<=ind; i++)
    for(int i=0; i<LastSlash; i++)
    for(int i=0; i<MAX_PROCESSES; i++)
            free(myPrompt); free(InputTxt);
    free(myPrompt); free(InputTxt);
            free(ProcessPath); free(ProcessInfopath);
    free(ProcessPath); free(ProcessInfopath);
    getcwd(homedir,MAX_DIR_SIZE);       //Permanant variable home directory
    hisfile = malloc(sizeof(char)*MAX_INP_SIZE);
            if(!comm)
        if(fgets(InputTxt, MAX_INP_SIZE, stdin) == NULL)
        if(strcmp(InputTxt,"\n") == 0)
        if(strcmp("quit",InputTxt) == 0)
#include "shell.h"
            ind++;
        InputTxt[strcspn(InputTxt, "\n")] = 0;
        int ind = -1;
    int LastSlash = (strrchr(ProcessPath,'/')-ProcessPath+1);
int main()
    int pid = getpid();
        myPrompt = DisplayPrompt();
    PrevPath[0] = '\0';
    PrevPath = malloc(sizeof(char)*MAX_DIR_SIZE);
            printf("\n");
        printf("%s",myPrompt);
        Process_Array[i].stat = false;
    readlink(ProcessInfopath,ProcessPath , MAX_INP_SIZE);
            return 0;
    signal(SIGCHLD,ReturnTerminatedProcess);
    signal(SIGINT, signal_handler_c);
    signal(SIGTSTP, signal_handler_z);
    sprintf(ProcessInfopath,"/proc/%d/exe",pid);
    stin = dup(STDIN_FILENO);
        StoreHistory(InputTxt);
    stou = dup(STDOUT_FILENO);
    strcat(hisfile,"history.txt");
            strcpy(inp[ind],token);
        strncat(hisfile,&ProcessPath[i],1);
            token = strtok(NULL, ";");
    while(1)
        while (token != NULL) {
